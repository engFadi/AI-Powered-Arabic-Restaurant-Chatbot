@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Google Fonts and Bootstrap Icons -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<style>
    /* --- CSS Variables for easy theme management --- */
    :root {
        --primary-green: #198754;
        --light-green-bg: #f0fdf4;
        --hover-green: #d1fae5;
        --selected-green: #a7f3d0;
        --border-color: #dee2e6;
        --text-dark: #1f2937;
        --text-light: #4b5563;

        /* Status Colors */
        --status-pending-bg: #fef08a; /* Yellow for initial state */
        --status-pending-text: #854d0e;
        --status-submitted-bg: #e0e7ff; /* Light Indigo for acknowledged */
        --status-submitted-text: #3730a3;
        --status-processing-bg: #93c5fd;
        --status-processing-text: #1e40af;
        --status-delivery-bg: #fed7aa;
        --status-delivery-text: #9a3412;
        --status-delivered-bg: #a7f3d0;
        --status-delivered-text: #065f46;
        --status-cancelled-bg: #fecaca;
        --status-cancelled-text: #991b1b;
    }

    /* --- General Styling --- */
    body {
        background-color: var(--light-green-bg);
        font-family: 'Inter', sans-serif;
        color: var(--text-dark);
    }

    h2, h4 {
        color: var(--primary-green);
        font-weight: 600;
    }

    /* --- Layout Containers with Shadows --- */
    .order-list-container, .card {
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        background-color: #ffffff;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }

    .order-list-container {
        height: 80vh;
        overflow-y: auto;
        padding: 0.5rem;
    }

    /* --- Enhanced List Items --- */
    .order-item {
        border-radius: 0.375rem;
        margin-bottom: 0.5rem;
        border: 1px solid transparent;
        transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
    }

    .order-item.selected {
        background-color: var(--selected-green);
        border-color: var(--primary-green);
        font-weight: 600;
    }

    .order-item:hover {
        background-color: var(--hover-green);
        cursor: pointer;
    }

    /* --- Modern Status Badges --- */
    .status-badge {
        font-size: 0.8rem;
        padding: .25em .6em;
        border-radius: 9999px;
        font-weight: 600;
        text-shadow: none;
    }

    .status-Pending { background-color: var(--status-pending-bg); color: var(--status-pending-text); }
    .status-Submitted { background-color: var(--status-submitted-bg); color: var(--status-submitted-text); }
    .status-Processing { background-color: var(--status-processing-bg); color: var(--status-processing-text); }
    .status-OutForDelivery { background-color: var(--status-delivery-bg); color: var(--status-delivery-text); }
    .status-Delivered { background-color: var(--status-delivered-bg); color: var(--status-delivered-text); }
    .status-Cancelled { background-color: var(--status-cancelled-bg); color: var(--status-cancelled-text); }

    /* --- Custom Scrollbar --- */
    .order-list-container::-webkit-scrollbar { width: 8px; }
    .order-list-container::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
    .order-list-container::-webkit-scrollbar-thumb { background: #cccccc; border-radius: 10px; }
    .order-list-container::-webkit-scrollbar-thumb:hover { background: var(--primary-green); }
</style>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">Order Dashboard</h2>
        <button id="logoutButton" class="btn btn-outline-danger">
            <i class="bi bi-box-arrow-right"></i> Logout
        </button>
    </div>

    <div class="row">
        <!-- Order List Column -->
        <div class="col-md-4">
            <h4>Incoming Orders</h4>
            <div class="d-flex mb-3">
                <!-- ✅ UPDATED STATUS FILTER -->
                <select id="statusFilter" class="form-select me-2">
                    <option value="all">All Statuses</option>
                    <option value="Pending" selected>Pending</option> <!-- New default -->
                    <option value="Submitted">Submitted</option>
                    <option value="Processing">Processing</option>
                    <option value="OutForDelivery">Out for Delivery</option>
                    <option value="Delivered">Delivered</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
                <select id="sortBy" class="form-select">
                    <option value="date_desc" selected>Newest First</option>
                    <option value="date_asc">Oldest First</option>
                    <option value="status">By Status</option>
                </select>
            </div>
            <div id="orderList" class="list-group order-list-container"></div>
        </div>
        <!-- Order Details Column -->
        <div class="col-md-8">
            <h4>Order Details</h4>
            <div id="orderDetails" class="card">
                <div class="card-body">
                    <p class="text-muted">Select an order to see the details.</p>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const loginUrl = '@Url.Action("Login", "Auth")';

        //  Event Listener  تم تصحيح بنية الـ
        document.addEventListener('DOMContentLoaded', function () {
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = loginUrl;
                return;
            }

            // Get references to all interactive elements
            const statusFilter = document.getElementById('statusFilter');
            const sortBy = document.getElementById('sortBy');
            const logoutButton = document.getElementById('logoutButton');

            // Attach all event listeners
            statusFilter.addEventListener('change', loadOrders);
            sortBy.addEventListener('change', loadOrders);
            logoutButton.addEventListener('click', () => {
                localStorage.clear();
                window.location.href = loginUrl;
            });

            //  Load  استدعاء الـ
            //  Listener  بشكل صحيح داخل الـ
            loadOrders();
        });

        const getAuthHeaders = () => ({
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        });

        async function loadOrders() {
            const status = document.getElementById('statusFilter').value;
            const sortBy = document.getElementById('sortBy').value;
            const orderList = document.getElementById('orderList');

            orderList.innerHTML = '<div class="p-3 text-muted">Loading orders...</div>';

            try {
                const response = await fetch(`/api/orders?status=${status}&sortBy=${sortBy}`, { headers: getAuthHeaders() });

                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        window.location.href = loginUrl;
                        return;
                    }
                    throw new Error(`Failed to fetch orders. Status: ${response.status}`);
                }

                const orders = await response.json();
                orderList.innerHTML = '';

                if (!Array.isArray(orders) || orders.length === 0) {
                    orderList.innerHTML = '<div class="p-3 text-muted">No orders found.</div>';
                    document.getElementById('orderDetails').innerHTML = '<div class="card-body"><p class="text-muted">Select an order to see the details.</p></div>';
                    return;
                }

                orders.forEach(order => {
                    const orderItem = document.createElement('a');
                    orderItem.href = '#';
                    orderItem.className = 'list-group-item list-group-item-action order-item';
                    orderItem.dataset.orderId = order.id;
                    orderItem.innerHTML = `
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">Order #${order.id}</h5>
                            <small>${new Date(order.createdAt).toLocaleString()}</small>
                        </div>
                        <p class="mb-1"><strong>Customer:</strong> ${order.customerName}</p>
                        <small><strong>Status:</strong> <span class="status-badge status-${order.status}">${order.status}</span></small>
                    `;

                    orderItem.addEventListener('click', (e) => {
                        e.preventDefault();
                        document.querySelectorAll('.order-item').forEach(item => item.classList.remove('selected'));
                        orderItem.classList.add('selected');
                        loadOrderDetails(order.id);
                    });
                    orderList.appendChild(orderItem);
                });

            } catch (error) {
                orderList.innerHTML = '<div class="p-3 text-danger">Error loading orders.</div>';
                console.error("Error in loadOrders:", error);
            }
        }

        async function loadOrderDetails(orderId) {
            const orderDetails = document.getElementById('orderDetails');
            orderDetails.innerHTML = '<div class="card-body"><p class="text-muted">Loading details...</p></div>';

            try {
                const response = await fetch(`/api/orders/${orderId}`, { headers: getAuthHeaders() });
                if (!response.ok) throw new Error(`Failed to fetch details. Status: ${response.status}`);

                const order = await response.json();

                // ✅ CALCULATE DELIVERY FEE PROPERLY
                const subtotal = (order.items || []).reduce((sum, item) => sum + (item.quantity * item.menuItemPrice), 0);

                // Calculate delivery fee based on address
                let deliveryFee = 0;
                if (order.deliveryAddress && order.deliveryAddress !== "Not Provided") {
                    const address = order.deliveryAddress.toLowerCase();
                    if (address.includes("روابي") || address.includes("rawabi")) {
                        deliveryFee = 0; // Free
                    } else if (address.includes("بيرزيت") || address.includes("birzeit")) {
                        deliveryFee = 7;
                    } else if (address.includes("رام الله") || address.includes("ramallah")) {
                        deliveryFee = 12;
                    }
                }
                const totalPrice = subtotal + deliveryFee;
                //let totalPrice = (order.items || []).reduce((sum, item) => sum + (item.quantity * item.menuItemPrice), 0);

                const itemsHtml = (order.items || []).map(item => {
                    const itemTotal = item.quantity * item.menuItemPrice;
                    return `
                    <tr>
                        <td>${item.menuItemName || 'Archived Item'}</td>
                        <td>${item.notes ?? ""}</td>
                        <td>${item.quantity}</td>
                        <td>${item.menuItemPrice.toFixed(2)}₪</td>
                        <td>${itemTotal.toFixed(2)}₪</td>
                    </tr>`;
                }).join('');

                let actionButtonsHtml = '';
                switch (order.status) {
                    case 'Pending':
                        actionButtonsHtml = `
                            <button class="btn btn-info btn-sm" onclick="updateStatus(${order.id}, 'Submitted')">Submit Order</button>
                            <button class="btn btn-danger btn-sm" onclick="updateStatus(${order.id}, 'Cancelled')">Cancel Order</button>`;
                        break;
                    case 'Submitted':
                        actionButtonsHtml = `
                            <button class="btn btn-primary btn-sm" onclick="updateStatus(${order.id}, 'Processing')">Mark as Processing</button>
                            <button class="btn btn-danger btn-sm" onclick="updateStatus(${order.id}, 'Cancelled')">Cancel Order</button>`;
                        break;
                    case 'Processing':
                        actionButtonsHtml = `
                            <button class="btn btn-warning btn-sm" onclick="updateStatus(${order.id}, 'OutForDelivery')">Mark as Out for Delivery</button>
                            <button class="btn btn-danger btn-sm" onclick="updateStatus(${order.id}, 'Cancelled')">Cancel Order</button>`;
                        break;
                    case 'OutForDelivery':
                        actionButtonsHtml = `<button class="btn btn-success btn-sm" onclick="updateStatus(${order.id}, 'Delivered')">Mark as Delivered</button>`;
                        break;
                }

                orderDetails.innerHTML = `
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Order #${order.id} Details</h5>
                        <span class="status-badge status-${order.status}">${order.status}</span>
                    </div>
                    <div class="card-body">
                        <p><strong>Customer:</strong> ${order.customerName}</p>
                        <p><strong>Phone:</strong> ${order.phoneNumber || 'Not Provided'}</p>
                        <p><strong>Address:</strong> ${order.deliveryAddress || 'Not Provided'}</p>
                        <p><strong>Notes:</strong> ${order.notes || 'N/A'}</p>
                        <hr/><h6>Items</h6>
                        <table class="table table-sm table-striped">
                            <thead><tr><th>Item</th><th>Notes</th><th>Qty</th><th>Price</th><th>Total</th></tr></thead>
                            <tbody>${itemsHtml}</tbody>
                        </table>
                        <div class="row mt-3">
                    <div class="col-md-6 ms-auto">
                        <table class="table table-sm">
                            <tr>
                                <td><strong>Subtotal:</strong></td>
                                <td class="text-end">$${subtotal.toFixed(2)}</td>
                            </tr>
                            <tr>
                                <td><strong>Delivery Fee:</strong></td>
                                <td class="text-end">${deliveryFee > 0 ? '$' + deliveryFee.toFixed(2) : 'FREE'}</td>
                            </tr>
                            <tr class="table-success">
                                <td><strong>Total:</strong></td>
                                <td class="text-end"><strong>$${totalPrice.toFixed(2)}</strong></td>
                            </tr>
                        </table>
                    </div>
                </div>
                    </div>
                    <div class="card-footer text-end">
                        ${actionButtonsHtml}
                    </div>
                `;
            } catch (error) {
                orderDetails.innerHTML = '<div class="card-body"><p class="text-danger">Error loading details.</p></div>';
                console.error("Error in loadOrderDetails:", error);
            }
        }

        async function updateStatus(orderId, newStatus) {
            try {
                const response = await fetch(`/api/orders/${orderId}/status`, {
                    method: 'PUT',
                    headers: getAuthHeaders(),
                    body: JSON.stringify({ newStatus: newStatus })
                });
                if (!response.ok) throw new Error(`Failed to update status. Status: ${response.status}`);

                await loadOrders();

                const currentItem = document.querySelector(`.order-item[data-order-id='${orderId}']`);
                if (currentItem) {
                    currentItem.classList.add('selected');
                }

                await loadOrderDetails(orderId);

            } catch (error) {
                alert('Error updating status. Please check the console for details.');
                console.error("Error in updateStatus:", error);
            }
        }
    </script>
}

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">